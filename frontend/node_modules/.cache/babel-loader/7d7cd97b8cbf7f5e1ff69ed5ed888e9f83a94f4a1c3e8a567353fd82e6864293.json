{"ast":null,"code":"import axios from 'axios';\nimport Chart from 'chart.js/auto';\nexport default {\n  data() {\n    return {\n      name: '',\n      votingChoice: '',\n      castedAt: '',\n      votes: []\n    };\n  },\n  methods: {\n    submitVote() {\n      axios.post('http://localhost:5000/vote', {\n        name: this.name,\n        voting_choice: this.votingChoice,\n        casted_at: this.castedAt\n      }).then(response => {\n        console.log(response.data);\n        // Reset form fields after successful submission\n        this.name = '';\n        this.votingChoice = '';\n        this.castedAt = '';\n        // Fetch the updated list of votes\n        this.fetchVotes();\n      }).catch(error => {\n        console.error('Error submitting vote:', error);\n      });\n    },\n    fetchVotes() {\n      axios.get('http://localhost:5000/data').then(response => {\n        this.votes = response.data.data;\n        this.renderLineChart();\n        this.renderBarGraph();\n      }).catch(error => {\n        console.error('Error fetching votes:', error);\n      });\n    },\n    renderLineChart() {\n      const ctx = document.getElementById('lineChart').getContext('2d');\n      const labels = this.votes.map(vote => vote.casted_at);\n      const data = {\n        labels: labels,\n        datasets: [{\n          label: 'Yes',\n          data: this.votes.filter(vote => vote.voting_choice === 'true').map(vote => vote.casted_at),\n          borderColor: 'blue',\n          fill: false\n        }, {\n          label: 'No',\n          data: this.votes.filter(vote => vote.voting_choice === 'false').map(vote => vote.casted_at),\n          borderColor: 'red',\n          fill: false\n        }]\n      };\n      new Chart(ctx, {\n        type: 'line',\n        data: data\n      });\n    },\n    renderBarGraph() {\n      const ctx = document.getElementById('barGraph').getContext('2d');\n      const counts = this.votes.reduce((acc, vote) => {\n        if (vote.voting_choice === 'true') {\n          acc['yes'] = (acc['yes'] || 0) + 1;\n        } else {\n          acc['no'] = (acc['no'] || 0) + 1;\n        }\n        return acc;\n      }, {});\n      const data = {\n        labels: ['Yes', 'No'],\n        datasets: [{\n          label: 'Votes',\n          data: [counts['yes'] || 0, counts['no'] || 0],\n          backgroundColor: ['blue', 'red']\n        }]\n      };\n      new Chart(ctx, {\n        type: 'bar',\n        data: data\n      });\n    }\n  },\n  created() {\n    // Fetch the list of votes when the component is created\n    this.fetchVotes();\n  }\n};","map":{"version":3,"names":["axios","Chart","data","name","votingChoice","castedAt","votes","methods","submitVote","post","voting_choice","casted_at","then","response","console","log","fetchVotes","catch","error","get","renderLineChart","renderBarGraph","ctx","document","getElementById","getContext","labels","map","vote","datasets","label","filter","borderColor","fill","type","counts","reduce","acc","backgroundColor","created"],"sources":["F:\\taghash\\frontend\\src\\components\\HelloWorld.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>Voting Form</h1>\n    <form @submit.prevent=\"submitVote\">\n      <input type=\"text\" v-model=\"name\" placeholder=\"Name\" required>\n      <select v-model=\"votingChoice\" required>\n        <option value=\"true\">Yes</option>\n        <option value=\"false\">No</option>\n      </select>\n      <input type=\"datetime-local\" v-model=\"castedAt\" required>\n      <button type=\"submit\">Submit Vote</button>\n    </form>\n    \n    <div v-if=\"votes.length\">\n      <h2>Votes:</h2>\n      <table>\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Voting Choice</th>\n            <th>Casted At</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr v-for=\"(vote, index) in votes\" :key=\"index\">\n            <td>{{ vote.name }}</td>\n            <td>{{ vote.voting_choice }}</td>\n            <td>{{ vote.casted_at }}</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n    \n    <div>\n      <h2>Trend Analysis</h2>\n      <canvas id=\"lineChart\"></canvas>\n      <canvas id=\"barGraph\"></canvas>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport Chart from 'chart.js/auto';\n\nexport default {\n  data() {\n    return {\n      name: '',\n      votingChoice: '',\n      castedAt: '',\n      votes: []\n    };\n  },\n  methods: {\n    submitVote() {\n      axios.post('http://localhost:5000/vote', {\n        name: this.name,\n        voting_choice: this.votingChoice,\n        casted_at: this.castedAt\n      }).then(response => {\n        console.log(response.data);\n        // Reset form fields after successful submission\n        this.name = '';\n        this.votingChoice = '';\n        this.castedAt = '';\n        // Fetch the updated list of votes\n        this.fetchVotes();\n      }).catch(error => {\n        console.error('Error submitting vote:', error);\n      });\n    },\n    fetchVotes() {\n      axios.get('http://localhost:5000/data')\n        .then(response => {\n          this.votes = response.data.data;\n          this.renderLineChart();\n          this.renderBarGraph();\n        }).catch(error => {\n          console.error('Error fetching votes:', error);\n        });\n    },\n    renderLineChart() {\n      const ctx = document.getElementById('lineChart').getContext('2d');\n      const labels = this.votes.map(vote => vote.casted_at);\n      const data = {\n        labels: labels,\n        datasets: [{\n          label: 'Yes',\n          data: this.votes.filter(vote => vote.voting_choice === 'true').map(vote => vote.casted_at),\n          borderColor: 'blue',\n          fill: false\n        }, {\n          label: 'No',\n          data: this.votes.filter(vote => vote.voting_choice === 'false').map(vote => vote.casted_at),\n          borderColor: 'red',\n          fill: false\n        }]\n      };\n      new Chart(ctx, {\n        type: 'line',\n        data: data\n      });\n    },\n    renderBarGraph() {\n      const ctx = document.getElementById('barGraph').getContext('2d');\n      const counts = this.votes.reduce((acc, vote) => {\n        if (vote.voting_choice === 'true') {\n          acc['yes'] = (acc['yes'] || 0) + 1;\n        } else {\n          acc['no'] = (acc['no'] || 0) + 1;\n        }\n        return acc;\n      }, {});\n      const data = {\n        labels: ['Yes', 'No'],\n        datasets: [{\n          label: 'Votes',\n          data: [counts['yes'] || 0, counts['no'] || 0],\n          backgroundColor: ['blue', 'red']\n        }]\n      };\n      new Chart(ctx, {\n        type: 'bar',\n        data: data\n      });\n    }\n  },\n  created() {\n    // Fetch the list of votes when the component is created\n    this.fetchVotes();\n  }\n};\n</script>\n\n<style>\n/* Add your CSS styles here */\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}