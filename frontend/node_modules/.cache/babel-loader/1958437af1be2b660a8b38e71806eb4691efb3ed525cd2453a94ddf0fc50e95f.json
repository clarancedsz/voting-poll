{"ast":null,"code":"import axios from 'axios';\nimport Chart from 'chart.js/auto';\nconst api = axios.create({\n  baseURL: 'http://localhost:5000/api/'\n});\nexport default {\n  data() {\n    return {\n      currentTab: 'tab1',\n      name: '',\n      choice: '',\n      time: '',\n      votes: []\n    };\n  },\n  methods: {\n    submitVote() {\n      api.post('submit-vote', {\n        name: this.name,\n        choice: this.choice,\n        time: this.time\n      }).then(response => {\n        console.log(response.data);\n        this.name = '';\n        this.choice = '';\n        this.time = '';\n        this.fetchVotes();\n      }).catch(error => {\n        console.error('Error submitting vote:', error);\n      });\n    },\n    fetchVotes() {\n      api.get('get-votes').then(response => {\n        this.votes = response.data;\n        this.renderLineChart();\n        this.renderBarChart();\n      }).catch(error => {\n        console.error('Error fetching votes:', error);\n      });\n    },\n    renderLineChart() {\n      const voteData = this.votes.reduce((acc, vote) => {\n        const date = new Date(vote.time).toLocaleDateString();\n        if (!acc[date]) {\n          acc[date] = {\n            yes: 0,\n            no: 0\n          };\n        }\n        vote.choice === 'true' ? acc[date].yes++ : acc[date].no++;\n        return acc;\n      }, {});\n      const labels = Object.keys(voteData);\n      const yesData = Object.values(voteData).map(data => data.yes);\n      const noData = Object.values(voteData).map(data => data.no);\n      const ctx = document.getElementById('lineChart').getContext('2d');\n      new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: labels,\n          datasets: [{\n            label: 'Yes Votes',\n            data: yesData,\n            borderColor: 'blue',\n            borderWidth: 2,\n            fill: false\n          }, {\n            label: 'No Votes',\n            data: noData,\n            borderColor: 'red',\n            borderWidth: 2,\n            fill: false\n          }]\n        }\n      });\n    },\n    renderBarChart() {\n      api.get('results').then(response => {\n        const results = response.data;\n        const labels = results.map(result => result.choice === 'true' ? 'Yes' : 'No');\n        const counts = results.map(result => result.count);\n        const ctx = document.getElementById('barChart').getContext('2d');\n        new Chart(ctx, {\n          type: 'bar',\n          data: {\n            labels: labels,\n            datasets: [{\n              label: 'Number of Votes',\n              data: counts,\n              backgroundColor: ['blue', 'red']\n            }]\n          },\n          options: {\n            scales: {\n              y: {\n                beginAtZero: true\n              }\n            }\n          }\n        });\n      }).catch(error => {\n        console.error('Error fetching results:', error);\n      });\n    }\n  },\n  created() {\n    this.fetchVotes();\n  }\n};","map":{"version":3,"names":["axios","Chart","api","create","baseURL","data","currentTab","name","choice","time","votes","methods","submitVote","post","then","response","console","log","fetchVotes","catch","error","get","renderLineChart","renderBarChart","voteData","reduce","acc","vote","date","Date","toLocaleDateString","yes","no","labels","Object","keys","yesData","values","map","noData","ctx","document","getElementById","getContext","type","datasets","label","borderColor","borderWidth","fill","results","result","counts","count","backgroundColor","options","scales","y","beginAtZero","created"],"sources":["F:\\taghash\\frontend\\src\\components\\HelloWorld.vue"],"sourcesContent":["<template>\n  <div>\n    <div class=\"tabs\">\n      <button class=\"tab-button\" :class=\"{ 'active': currentTab === 'tab1' }\" @click=\"currentTab = 'tab1'\">Voting Form</button>\n      <button class=\"tab-button\" :class=\"{ 'active': currentTab === 'tab2' }\" @click=\"currentTab = 'tab2'\">Trend Analysis</button>\n    </div>\n\n    <div v-show=\"currentTab === 'tab1'\">\n      <h1>Voting Form</h1>\n      <form @submit.prevent=\"submitVote\">\n        <input type=\"text\" v-model=\"name\" placeholder=\"Name\" required>\n        <select v-model=\"choice\" required>\n          <option value=\"true\">Yes</option>\n          <option value=\"false\">No</option>\n        </select>\n        <input type=\"datetime-local\" v-model=\"time\" required>\n        <button type=\"submit\">Submit Vote</button>\n      </form>\n\n      <div v-if=\"votes.length\" class=\"center-table\">\n        <h2>Votes:</h2>\n        <table>\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Choice</th>\n              <th>Time</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr v-for=\"(vote, index) in votes\" :key=\"index\">\n              <td>{{ vote.name }}</td>\n              <td>{{ vote.choice }}</td>\n              <td>{{ vote.time }}</td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n\n    <div v-show=\"currentTab === 'tab2'\">\n      <h2>Trend Analysis</h2>\n      <canvas id=\"lineChart\"></canvas>\n      <canvas id=\"barChart\"></canvas>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport Chart from 'chart.js/auto';\n\nconst api = axios.create({\n  baseURL: 'http://localhost:5000/api/'\n});\n\nexport default {\n  data() {\n    return {\n      currentTab: 'tab1',\n      name: '',\n      choice: '',\n      time: '',\n      votes: []\n    };\n  },\n  methods: {\n    submitVote() {\n      api.post('submit-vote', {\n        name: this.name,\n        choice: this.choice,\n        time: this.time\n      }).then(response => {\n        console.log(response.data);\n        this.name = '';\n        this.choice = '';\n        this.time = '';\n        this.fetchVotes();\n      }).catch(error => {\n        console.error('Error submitting vote:', error);\n      });\n    },\n    fetchVotes() {\n      api.get('get-votes')\n        .then(response => {\n          this.votes = response.data;\n          this.renderLineChart();\n          this.renderBarChart();\n        }).catch(error => {\n          console.error('Error fetching votes:', error);\n        });\n    },\n    renderLineChart() {\n      const voteData = this.votes.reduce((acc, vote) => {\n        const date = new Date(vote.time).toLocaleDateString();\n        if (!acc[date]) {\n          acc[date] = { yes: 0, no: 0 };\n        }\n        vote.choice === 'true' ? acc[date].yes++ : acc[date].no++;\n        return acc;\n      }, {});\n\n      const labels = Object.keys(voteData);\n      const yesData = Object.values(voteData).map(data => data.yes);\n      const noData = Object.values(voteData).map(data => data.no);\n\n      const ctx = document.getElementById('lineChart').getContext('2d');\n      new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: labels,\n          datasets: [\n            {\n              label: 'Yes Votes',\n              data: yesData,\n              borderColor: 'blue',\n              borderWidth: 2,\n              fill: false\n            },\n            {\n              label: 'No Votes',\n              data: noData,\n              borderColor: 'red',\n              borderWidth: 2,\n              fill: false\n            }\n          ]\n        }\n      });\n    },\n    renderBarChart() {\n      api.get('results')\n        .then(response => {\n          const results = response.data;\n          const labels = results.map(result => result.choice === 'true' ? 'Yes' : 'No');\n          const counts = results.map(result => result.count);\n\n          const ctx = document.getElementById('barChart').getContext('2d');\n          new Chart(ctx, {\n            type: 'bar',\n            data: {\n              labels: labels,\n              datasets: [{\n                label: 'Number of Votes',\n                data: counts,\n                backgroundColor: ['blue', 'red']\n              }]\n            },\n            options: {\n              scales: {\n                y: {\n                  beginAtZero: true\n                }\n              }\n            }\n          });\n        }).catch(error => {\n          console.error('Error fetching results:', error);\n        });\n    }\n  },\n  created() {\n    this.fetchVotes();\n  }\n};\n</script>\n\n<style>\n.center-table {\n  display: flex;\n  justify-content: center;\n}\n\n.tabs {\n  display: flex;\n}\n\n.center-tabs {\n  display: flex;\n  justify-content: center;\n}\n\n.tab-button {\n  padding: 10px;\n  cursor: pointer;\n  border: none;\n  background-color: transparent;\n  outline: none;\n}\n\n.tab-button.active {\n  background-color: lightgray;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}